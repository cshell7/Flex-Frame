/* ----------------------------------------------------------------------------------
			FLEX
---------------------------------------------------------------------------------- */


/* +============================+
		A. INTRODUCTION/NOTES:
+=============================+ */
/*

The structure of the framework is brought to you by FlexBox.

Flexbox = Magic and Awesome and Flying Unicorns

Flexbox is a magical css property taken from the lands of Oz that make it really easy to lay things out and position them. There are a few key differences from using the typical twelve column structure, like how things wrap and how they scale by screen size. But to get you started just think that if flex-containers are the rows of the layout, then items are the columns except for the fact the items can wrap to the next line if they run out of space on their row. For further reading here is a great intro to flexbox: https://css-tricks.com/snippets/css/a-guide-to-flexbox/

If you have any questions about this framework feel free to ask Calvin; I just might help you. :P

*/


/* +=============================+
		B. TABLE OF CONTENTS:
+=============================+ */

/*

    A. Notes
    B. Table of Contents

1. Flex Containers
  1.2 Flex Container Properties
		1.2.1 Flex Direction
		1.2.2 Row Wrap
		1.2.3 Horizontal Align/Space
		1.2.4 Vertical Align/Space
2. Flex Items
	2.1 Sizing
		2.1.1 Flex Basis
		2.1.2 Grow
		2.1.3 Shrink
	2.2 Width
	2.3 Pulls
	2.4 Floats
	2.5 Stretch

*/


/* +=============================+
		1. Flex Containers
+=============================+ */

[data-flex--container] {
	display: flex;
	flex-wrap: wrap;
	align-items: stretch;
	align-content: flex-start;
	position: relative;
}

//This sets the defaults on the children and keeps things safe and working.
[data-flex--container] > * {
	max-width: 100%;
	flex-grow: 0;
	flex-shrink: 1;
	flex-basis: auto;
}


//Sets all children to be flex containers.
[data-flex--container*='all-children'] > *, [data-flex--container*='flexify-all'] > * {
	display: flex;
	flex-wrap: wrap;
	align-content: flex-start;
}

//If 'all-children' or 'flexify-all' was used this can used to stop all children from inheriting the flex container property.
//Note: This will still set the direct children of the flex container to be flex items but it will stop those flex items and their childrem from becoming flex containers and causing their children to also be flex items.
[data-flex--container*='reset-children'] > * > *, [data-flex--container*='flexify-normal'] > * > * {
	display: block;
}


/* =-----------------------------=
		1.2 Flex Container Properties
 */

//Use these helper classes to change the properties of the Flex Container properties and its children.


/*=----------|1.2.1 Flex Direction |----------=*/

[data-flex--container*='row'] {
	flex-direction: row; //Default
}

[data-flex--container*='column'] {
	flex-direction: column;
}

//This Keeps the children in a column from acting up.
[data-flex--container*='column'] > * {
	width: 100%;
}


/*=----------|1.2.2 Row Wrap |----------=*/

[data-flex--container*='wrap'] {
	flex-wrap: wrap; //Default
}

[data-flex--container*='nowrap'] {
	flex-wrap: nowrap;
}


/*=----------|1.2.3 Horizontal Align/Space|----------=*/

//Flex items will align to the left.
[data-flex--container*='left'] {
	justify-content: flex-start; //Default
}

[data-flex--container*='right'] {
	justify-content: flex-end;
}

[data-flex--container*='center'] {
	justify-content: center;
}

//Each flex row puts equal space on the sides of each flex item exept on the sides of the flex container.
[data-flex--container*='space-between-items'] {
	justify-content: space-between;
}

//Each flex row puts equal space on the sides of each flex item.
[data-flex--container*='space-around-items'] {
	justify-content: space-around;
}

//Sets all Flex Items to Automatically grow to fill any empty space on their row.
[data-flex--container*='all-items--grow'] > * {
	flex-grow: 1;
}

[data-flex__container*='all-items--nogrow'] > * {
	flex-grow: 0 !important;
}


/*=----------|1.2.4 Vertical Align/Space|----------=*/

//All of the flex rows are aligned to the top of the flex container.
[data-flex--container*='top'] {
	align-content: flex-start;  //default
}

[data-flex--container*='bottom'] {
	align-content: flex-end;
}

[data-flex--container*='middle'] {
	align-content: center;
}

//Flex rows stretch equally in height to fill the height of the flex container.
//NOTE: this only works if the flex container has a set height as it does not stretch the flex items but the flex rows.
[data-flex--container*='stretch-rows'] {
	align-content: stretch;
}

//Equal space is put between the flex rows (except at the top and bottom of the flex container) to fill the height of the flex container.
//NOTE: This doesn't really do anything unless the flexcontainer has extra vertical space.
[data-flex--container*='space-between-rows'] {
	align-content: space-between;
}

//Equal space is put between the flex rows to fill the height of the flex container.
//NOTE: This doesn't really do anything unless the flexcontainer has extra vertical space.
[data-flex--container*='space-around-rows'] {
	align-content: space-around;
}

//Aligns all of the items on a flex row to be top aligned to the row.
[data-flex--container*='row-items--top'] {
	align-items: flex-start; //Default
}

[data-flex--container*='row-items--bottom'] {
	align-items: flex-end;
}

[data-flex--container*='row-items--middle'] {
	align-items: center;
}

//Stretches all of the flex items on a row to be the same height
[data-flex--container*='row-items--stretch'] {
	align-items: stretch; //Default
}



/* +=============================+
 		2. Flex Items
 +=============================+ */


/* =-----------------------------=
 		2.1 Sizing
  */


/*=----------|1.1.1 Flex Basis |----------=*/

[data-flex--item*='basis--auto'] {
	flex-basis: auto;
}

[data-flex--item*='basis--5'] {
	@include flex-item-basis(5);
}

[data-flex--item*='basis--10'] {
	@include flex-item-basis(10);
}

[data-flex--item*='basis--15'] {
	@include flex-item-basis(15);
}

[data-flex--item*='basis--20'] {
	@include flex-item-basis(20);
}

[data-flex--item*='basis--25'] {
	@include flex-item-basis(25);
}

[data-flex--item*='basis--30'] {
	@include flex-item-basis(30);
}

[data-flex--item*='basis--35'] {
	@include flex-item-basis(35);
}

[data-flex--item*='basis--40'] {
	@include flex-item-basis(40);
}

[data-flex--item*='basis--45'] {
	@include flex-item-basis(45);
}

[data-flex--item*='basis--50'] {
	@include flex-item-basis(50);
}

[data-flex--item*='basis--55'] {
	@include flex-item-basis(55);
}

[data-flex--item*='basis--60'] {
	@include flex-item-basis(60);
}

[data-flex--item*='basis--65'] {
	@include flex-item-basis(65);
}

[data-flex--item*='basis--70'] {
	@include flex-item-basis(70);
}

[data-flex--item*='basis--75'] {
	@include flex-item-basis(75);
}

[data-flex--item*='basis--80'] {
	@include flex-item-basis(80);
}

[data-flex--item*='basis--85'] {
	@include flex-item-basis(85);
}

[data-flex--item*='basis--90'] {
	@include flex-item-basis(90);
}

[data-flex--item*='basis--95'] {
	@include flex-item-basis(95);
}

[data-flex--item*='basis--100'] {
	@include flex-item-basis(100);
}

[data-flex--item*='basis--125'] {
	@include flex-item-basis(125);
}

[data-flex--item*='basis--150'] {
	@include flex-item-basis(150);
}

[data-flex--item*='basis--175'] {
	@include flex-item-basis(175);
}

[data-flex--item*='basis--200'] {
	@include flex-item-basis(200);
}

[data-flex--item*='basis--225'] {
	@include flex-item-basis(225);
}

[data-flex--item*='basis--250'] {
	@include flex-item-basis(250);
}

[data-flex--item*='basis--275'] {
	@include flex-item-basis(275);
}

[data-flex--item*='basis--300'] {
	@include flex-item-basis(300);
}

[data-flex--item*='basis--325'] {
	@include flex-item-basis(325);
}

[data-flex--item*='basis--350'] {
	@include flex-item-basis(350);
}

[data-flex--item*='basis--375'] {
	@include flex-item-basis(375);
}

[data-flex--item*='basis--400'] {
	@include flex-item-basis(400);
}

[data-flex--item*='basis--425'] {
	@include flex-item-basis(425);
}

[data-flex--item*='basis--450'] {
	@include flex-item-basis(450);
}

[data-flex--item*='basis--475'] {
	@include flex-item-basis(475);
}

[data-flex--item*='basis--500'] {
	@include flex-item-basis(500);
}

[data-flex--item*='basis--525'] {
	@include flex-item-basis(525);
}

[data-flex--item*='basis--550'] {
	@include flex-item-basis(550);
}

[data-flex--item*='basis--575'] {
	@include flex-item-basis(575);
}

[data-flex--item*='basis--600'] {
	@include flex-item-basis(600);
}

[data-flex--item*='basis--625'] {
	@include flex-item-basis(625);
}

[data-flex--item*='basis--650'] {
	@include flex-item-basis(650);
}

[data-flex--item*='basis--675'] {
	@include flex-item-basis(675);
}

[data-flex--item*='basis--700'] {
	@include flex-item-basis(700);
}

[data-flex--item*='basis--725'] {
	@include flex-item-basis(725);
}

[data-flex--item*='basis--750'] {
	@include flex-item-basis(750);
}

[data-flex--item*='basis--775'] {
	@include flex-item-basis(775);
}

[data-flex--item*='basis--800'] {
	@include flex-item-basis(800);
}

[data-flex--item*='basis--825'] {
	@include flex-item-basis(825);
}

[data-flex--item*='basis--875'] {
	@include flex-item-basis(875);
}

[data-flex--item*='basis--850'] {
	@include flex-item-basis(850);
}

[data-flex--item*='basis--900'] {
	@include flex-item-basis(900);
}

[data-flex--item*='basis--925'] {
	@include flex-item-basis(925);
}

[data-flex--item*='basis--950'] {
	@include flex-item-basis(950);
}

[data-flex--item*='basis--975'] {
	@include flex-item-basis(975);
}

[data-flex--item*='basis--1000'] {
	@include flex-item-basis(1000);
}


/*=----------|1.1.2 Grow |----------=*/


[data-flex--item*='grow--0'] {
	@include flex-item-grow(0); //Default
}

[data-flex--item*='grow--1'] {
	@include flex-item-grow(1);
}

[data-flex--item*='grow--2'] {
	@include flex-item-grow(2);
}

[data-flex--item*='grow--3'] {
	@include flex-item-grow(3);
}

[data-flex--item*='grow--4'] {
	@include flex-item-grow(4);
}

[data-flex--item*='grow--5'] {
	@include flex-item-grow(5);
}

[data-flex--item*='grow--6'] {
	@include flex-item-grow(6);
}

[data-flex--item*='grow--7'] {
	@include flex-item-grow(7);
}

[data-flex--item*='grow--8'] {
	@include flex-item-grow(8);
}

[data-flex--item*='grow--9'] {
	@include flex-item-grow(9);
}

[data-flex--item*='grow--10'] {
	@include flex-item-grow(10);
}


/*=----------|1.1.3 Shrink |----------=*/


[data-flex--item*='shrink--0'] {
	@include flex-item-shrink(0);
}

[data-flex--item*='shrink--1'] {
	@include flex-item-shrink(1); //Default
}

[data-flex--item*='shrink--2'] {
	@include flex-item-shrink(2);
}

[data-flex--item*='shrink--3'] {
	@include flex-item-shrink(3);
}

[data-flex--item*='shrink--4'] {
	@include flex-item-shrink(4);
}

[data-flex--item*='shrink--5'] {
	@include flex-item-shrink(5);
}

[data-flex--item*='shrink--6'] {
	@include flex-item-shrink(6);
}

[data-flex--item*='shrink--7'] {
	@include flex-item-shrink(7);
}

[data-flex--item*='shrink--8'] {
	@include flex-item-shrink(8);
}

[data-flex--item*='shrink--9'] {
	@include flex-item-shrink(9);
}

[data-flex--item*='shrink--10'] {
	@include flex-item-shrink(10);
}


/* =-----------------------------=
  		2.2 Width
   */


//use this to do a row break, this is the same as col-12
[data-flex--item*='break'], [data-flex--item*='full'], [data-flex--item*='col-12'] {
	width: 100%;
}

//use this to keep things the same width as the site container.
[data-flex--item*='site-container'] {
	margin-left: auto;
	margin-right: auto;
	width: 92% !important;
	width: 92vw !important;
	max-width: $screen-large;
}
@media (max-width: $screen-large) {
	[data-flex--item*='site-container'] {
		max-width: 92% !important;
		max-width: 92vw !important;
	}
}


/* =-----------------------------=
   		2.3 Pulls
    */

//The flex pulls will pull them and anything between them and the side they are getting pulled to to that side. If you would like to pull only one item make sure it is in the correct order on the row and keep things in seperate rows using 'break's.
[data-flex--item*='pull--right'] {
	margin-left: auto !important;
}

[data-flex--item*='pull--left'] {
	margin-right: auto !important;
}

[data-flex--item*='pull--center'] {
	margin-left: auto !important;
	margin-right: auto !important;
}

[data-flex--item*='pull--up'] {
	align-self: flex-start;
}

[data-flex--item*='pull--down'] {
	align-self: flex-end;
}

[data-flex--item*='pull--middle'] {
	align-self: center;
}


/* =-----------------------------=
   		2.4 Floats
    */

//These are very literal floats. They are positioned absolutely according to their parent container and are taken out of the flow of all other elements. These means things can be displayed underneath it.
//NOTE: Floats can be combined.


[data-flex--item*='float--right'] {
	position: absolute;
	right: 10px;
	z-index: 10; //TODO: set standards for z-index
}

[data-flex--item*='float--left'] {
	position: absolute;
	left: 10px;
	z-index: 10; //TODO: set standards for z-index
}

[data-flex--item*='float--top'] {
	position: absolute;
	top: 10px;
	z-index: 10; //TODO: set standards for z-index
}

[data-flex--item*='float--bottom'] {
	position: absolute;
	bottom: 10px;
	z-index: 10; //TODO: set standards for z-index
}



/* =-----------------------------=
   		2.5 Stretch
    */

//Makes flex item take up as much horizontal space on the flex row that it can.
[data-flex--item*='wide'] {
	flex-grow: 1;
}

//Flex item will try to stretch to be as tall as it can be on its flex row.
[data-flex--item*='tall'] {
	align-self: stretch;
}

//Flex item stretches both 'wide' and 'tall'.
[data-flex--item*='fat'] {
	flex-grow: 1;
	align-self: stretch;
}
